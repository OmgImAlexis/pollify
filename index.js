'use strict';
const EventEmitter = require('events');

/**
 * Produces an object that represents a stream of events generated by polling a provided function.
 * @param {object} options The to configure EventStream with.
 * @param {number} options.rate The rate with which to execute pollFn. Is in milliseconds.
 * @param {string} options.mode The mode of the pollFn return type. Possible values are 'promise', 'callback',
 * and 'return'
 * @param {function} pollFn The function to be polled. The results of pollFn() will be emitted. Must be a Promise
 * @param {*} fnArgs The arguments pollFn should be called with.
 */
function EventStream (options, pollFn, ...fnArgs) {
  const emitter = Object.create(new EventEmitter());
  options.rate = options.rate || 0;
  let stopped = false;
  let firstRun = true;
  const pollTypes = {
    _promise (startTime) {
      const req = pollFn(...fnArgs).then(data => {
        emit('data', data, startTime);
      }).catch(e => emit('error', e));

      // eslint-disable-next-line promise/catch-or-return
      req.then(() => repoll(startTime));
    },
    _callback (startTime) {
      pollFn(...fnArgs, (e, ...data) => {
        if (e) {
          return emit('error', e);
        }

        emit('data', ...data, startTime);
        repoll(startTime);
      });
    },
    _return (startTime) {
      try {
        const data = pollFn(...fnArgs);
        emit('data', data, startTime);
      } catch (e) {
        emit('error', e);
      }

      repoll(startTime);
    }
  };
  function emit (...args) {
    if (firstRun) {
      return process.nextTick(() => emitter.emit(...args));
    }
    return emitter.emit(...args);
  }
  function poll () {
    if (stopped) {
      return;
    }

    const startTime = Date.now();
    pollTypes['_' + options.mode](startTime);
    firstRun = false;
  }
  function repoll (startTime) {
    const timeDiff = options.rate - (Date.now() - startTime);

    if (timeDiff > 0) {
      return setTimeout(poll, timeDiff);
    }

    return setImmediate(poll);
  }

  poll();

  return Object.assign(emitter, {
    /**
     * Will start the event stream. EventStreams are started by default on construction.
     */
    start () {
      if (stopped) {
        stopped = false;
        poll();
      }
    },
    /**
     * Will stop the event stream.
     */
    stop () {
      stopped = true;
    }
  });
}

module.exports = EventStream;
